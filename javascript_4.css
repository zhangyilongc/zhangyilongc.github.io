/*
                                    css中级教程
*/
/*
块级元素（block element）
块级元素总是从新行开始，并占据可用的全部宽度（尽可能向左和向右伸展）。
块级元素的一些例子：
<div>
<h1> - <h6>
        <p>
        <form>
        <header>
        <footer>
        <section>
行内元素（inline element）
内联元素不从新行开始，仅占用所需的宽度。
行内元素的一些例子：
<span>
<a>
<img>


display 属性
display 属性规定是否/如何显示元素。
每个 HTML 元素都有一个默认的 display 值，具体取决于它的元素类型。大多数元素的默认 display 值为 block（块，要换行） 或 inline（行）。

none/block和hidden/visible
visibility:hidden; 也可以隐藏元素。
但是，该元素仍将占用与之前相同的空间。元素将被隐藏，但仍会影响布局：
none则不会，连空间都要删除

使用 width、max-width 和 margin: auto;
如上一章所述，块级元素始终占用可用的全部宽度（尽可能向左和向右伸展）。
设置块级元素的 width 将防止其延伸到其容器的边缘。然后，您可以将外边距设置为 auto，以将元素在其容器中水平居中。元素将占用指定的宽度，剩余空间将在两个外边距之间平均分配：
 position 属性
position 属性规定应用于元素的定位方法的类型。

有五个不同的位置值：
1.static
HTML 元素默认情况下的定位方式为 static（静态）。
静态定位的元素不受 top、bottom、left 和 right 属性的影响。
position: static; 的元素不会以任何特殊方式定位；它始终根据页面的正常流进行定位：
2.relative
position: relative; 的元素相对于其正常位置进行定位。
设置相对定位的元素的 top、right、bottom 和 left 属性将导致其偏离其正常位置进行调整。
不会对其余内容进行调整来适应元素留下的任何空间。
3.fixed
position: fixed; 的元素是相对于视口定位的，这意味着即使滚动页面，它也始终位于同一位置。 top、right、bottom 和 left 属性用于定位此元素。
固定定位的元素不会在页面中通常应放置的位置上留出空隙。
4.absolute
position: absolute; 的元素相对于最近的定位祖先元素进行定位（而不是相对于视口定位，如 fixed）。
然而，如果绝对定位的元素没有祖先，它将使用文档主体（body），并随页面滚动一起移动。
注意：“被定位的”元素是其位置除 static 以外的任何元素。
5.sticky

position: sticky; 的元素根据用户的滚动位置进行定位。
粘性元素根据滚动位置在相对（relative）和固定（fixed）之间切换。
起先它会被相对定位，直到在视口中遇到给定的偏移位置为止 - 然后将其“粘贴”在适当的位置（比如 position:fixed）。

重叠元素
在对元素进行定位时，它们可以与其他元素重叠。
z-index 属性指定元素的堆栈顺序（哪个元素应放置在其他元素的前面或后面）。
元素可以设置正或负的堆叠顺序：

CSS Overflow
overflow 属性指定在元素的内容太大而无法放入指定区域时是剪裁内容还是添加滚动条。
overflow 属性可设置以下值：
visible - 默认。溢出没有被剪裁。内容在元素框外渲染
hidden - 溢出被剪裁，其余内容将不可见
scroll - 溢出被剪裁，同时添加滚动条以查看其余内容
auto - 与 scroll 类似，但仅在必要时添加滚动条
注释：overflow 属性仅适用于具有指定高度的块元素。
注释：在 OS X Lion（在 Mac 上）中，滚动条默认情况下是隐藏的，并且仅在使用时显示（即使设置了 "overflow:scroll"）。

overflow-x 和 overflow-y
overflow-x 和 overflow-y 属性规定是仅水平还是垂直地（或同时）更改内容的溢出：
overflow-x 指定如何处理内容的左/右边缘。
overflow-y 指定如何处理内容的上/下边缘。

CSS 布局 - 浮动和清除
CSS float 属性规定元素如何浮动。
CSS clear 属性规定哪些元素可以在清除的元素旁边以及在哪一侧浮动。
float 属性
float 属性用于定位和格式化内容，例如让图像向左浮动到容器中的文本那里。

float 属性可以设置以下值之一：
left - 元素浮动到其容器的左侧
right - 元素浮动在其容器的右侧
none - 元素不会浮动（将显示在文本中刚出现的位置）。默认值。
inherit - 元素继承其父级的 float 值
最简单的用法是，float 属性可实现（报纸上）文字包围图片的效果。

clear 属性
clear 属性指定哪些元素可以浮动于被清除元素的旁边以及哪一侧。

clear 属性可设置以下值之一：

none - 允许两侧都有浮动元素。默认值
left - 左侧不允许浮动元素
right- 右侧不允许浮动元素
both - 左侧或右侧均不允许浮动元素
inherit - 元素继承其父级的 clear 值
使用 clear 属性的最常见用法是在元素上使用了 float 属性之后。
在清除浮动时，应该对清除与浮动进行匹配：如果某个元素浮动到左侧，则应清除左侧。您的浮动元素会继续浮动，但是被清除的元素将显示在其下方。
下例将清除向左的浮动。表示在（div 的）左侧不允许出现浮动元素：

clearfix Hack
如果一个元素比包含它的元素高，并且它是浮动的，它将“溢出”到其容器之外：
然后我们可以向包含元素添加 overflow: auto;，来解决此问题：
(就是可以让矮元素自动扩大到包含高元素)

只要您能够控制外边距和内边距（否则您可能会看到滚动条），overflow: auto clearfix 就会很好地工作。
但是，新的现代 clearfix hack 技术使用起来更安全，以下代码被应用于多数网站：
【
.clearfix::after {
  content: "";
  clear: both;
  display: table;
  】
}

 display: flex;弹性窗口，确保高度一样

 display: inline-block
与 display: inline 相比，主要区别在于 display: inline-block 允许在元素上设置宽度和高度。
同样，如果设置了 display: inline-block，将保留上下外边距/内边距，而 display: inline 则不会。
与 display: block 相比，主要区别在于 display：inline-block 在元素之后不添加换行符，因此该元素可以位于其他元素旁边。
下例展示 display: inline、display: inline-block 以及 display: block 的不同行为：

居中对齐元素
要使块元素（例如 <div> ）水平居中，请使用 margin: auto;。
设置元素的宽度将防止其延伸到容器的边缘。
然后，元素将占用指定的宽度，剩余空间将在两个外边距之间平均分配：

居中对齐文本
如果仅需在元素内居中文本，请使用 text-align: center;：

居中对齐图像
如需居中图像，请将左右外边距设置为 auto，并将其设置为块元素：
display: block;
  margin-left: auto;
  margin-right: auto;

  左和右对齐 - 使用 position
对齐元素的一种方法是使用 position: absolute; :
注意：绝对定位的元素将从正常流中删除，并可能出现元素重叠。

左和右对齐 - 使用 float
对齐元素的另一种方法是使用 float 属性：

垂直对齐 - 使用 padding
有很多方法可以在 CSS 中垂直对齐元素。一个简单的解决方案是使用上下内边距：

如需同时垂直和水平对齐，请使用 padding 和 text-align: center;：

垂直对齐 - 使用 line-height
另一个技巧是使用其值等于 height 属性值的 line-height 属性：

垂直对齐 - 使用 position 和 transform
如果您的选择不是 padding 和 line-height，则另一种解决方案是使用 position 和 transform 属性：

垂直对齐 - 使用 Flexbox
您还可以使用 flexbox 将内容居中。

CSS 中有四种不同的组合器：
后代选择器 (空格)
子选择器 (>)
相邻兄弟选择器 (+)
通用兄弟选择器 (~)

后代选择器
后代选择器匹配属于指定元素后代的所有元素。

子选择器
子选择器匹配属于指定元素【子元素】的所有元素。（就是必须是下一级）

相邻兄弟选择器
相邻兄弟选择器匹配所有作为指定元素的相邻同级的元素。
兄弟（同级）元素必须具有相同的父元素，“相邻”的意思是“紧随其后”。
（就是仅仅是紧随前者之后的同级元素，）

通用兄弟选择器
通用兄弟选择器匹配属于指定元素的同级元素的所有元素。
（就是紧随其中的同级的元素的所有内容）

所有 CSS 组合选择器
选择器	            示例	        示例描述
element element	    div p	    选择 <div> 元素内的所有 <p> 元素。
element>element	    div > p	    选择其父元素是 <div> 元素的所有 <p> 元素。
element+element	    div + p	    选择所有紧随 <div> 元素之后的 <p> 元素。
element1~element2	p ~ ul	    为所有相同的父元素中位于 p 元素【之后】的所有 ul 元素设置背景：


伪类的语法：
selector:pseudo-class {
  property: value;
}

 未访问的链接
a:link {
    color: #FF0000;
}

 已访问的链接
a:visited {
    color: #00FF00;
}

 鼠标悬停链接
a:hover {
    color: #FF00FF;
}

 已选择的链接
a:active {
    color: #0000FF;
}
注意：a:hover 必须在 CSS 定义中的 a:link 和 a:visited 之后，才能生效！a:active 必须在 CSS 定义中的 a:hover 之后才能生效！伪类名称对大小写不敏感。

CSS - :first-child 伪类
:first-child 伪类与指定的元素匹配：该元素是另一个元素的第一个子元素。
相当于匹配首个元素

匹配所有 <p> 元素中的首个 <i> 元素
在下面的例子中，选择器匹配所有 <p> 元素中的第一个 <i> 元素：（每个 p 中第一个子元素 i）
p i:first-child {
  color: blue;
}

匹配所有首个 <p> 元素中的所有 <i> 元素
在下面的例子中，选择器匹配作为另一个元素的第一个子元素的 <p> 元素中的所有 <i> 元素：
p:first-child i {
  color: blue;
}

CSS - :lang 伪类
:lang 伪类允许您为不同的语言定义特殊的规则。
在下面的例子中，:lang 为属性为 lang="en" 的 <q> 元素定义引号：
q:lang(en) {
  quotes: "~" "~";
}
<q lang="en">A quote in a paragraph</q>

所有 CSS 伪元素
选择器	        例子	            例子描述
::after	        p::after	    在每个 <p> 元素之后插入内容。
::before	    p::before	    在每个 <p> 元素之前插入内容。
::first-letter	p::first-letter	选择每个 <p> 元素的首字母。
::first-line	p::first-line	选择每个 <p> 元素的首行。
::selection	    p::selection	选择用户选择的元素部分。

CSS 伪元素
selector::pseudo-element {
  property: value;
}

opacity 属性的取值范围为 0.0-1.0。值越低，越透明：

如果您不希望对子元素应用不透明度，如上面的例子，请使用 RGBA 颜色值。下面的例子设置背景色而不是文本的不透明度：
RGBA 颜色值指定为：rgba(red, green, blue, alpha)。 alpha 参数是介于 0.0（完全透明）和 1.0（完全不透明）之间的数字。

导航栏 = 链接列表
导航栏需要标准 HTML 作为基础。
在我们的实例中，将用标准的 HTML 列表构建导航栏。
导航栏基本上就是链接列表，因此使用 <ul> 和 <li> 元素会很有意义：

从列表中删除项目符号以及外边距和内边距（填充）：
list-style-type: none; - 删除项目符号。导航条不需要列表项标记。
设置 margin: 0; 和 padding: 0; 删除浏览器的默认设置。

display: block; - 将链接显示为块元素可以使整个链接区域都可以被单击（而不仅仅是文本），
                我们还可以指定宽度（如果需要，还可以指定内边距、外边距、高度等）。
width: 60px; - 默认情况下，块元素会占用全部可用宽度。我们需要指定 60 像素的宽度。

向当前链接添加 "active" 类，以使用户知道他/她在哪个页面上：

居中链接以及添加边框
把 text-align:center 添加到 <li> 或 <a>，使链接居中。
将 border 属性添加到 <ul>，在导航栏周围添加边框。如果您还希望在导航栏内添加边框，请为所有 <li> 元素添加 border-bottom，最后一个元素除外：

【
<!DOCTYPE html>
<html>
<head>
<style>
ul {
  list-style-type: none;
  margin: 0;
  padding: 0;
  width: 200px;
  background-color: #f1f1f1;
  border: 1px solid #555;
}
li a {
  display: block;
  color: #000;
  padding: 8px 16px;
  text-decoration: none;
}
li {
  text-align: center;
  border-bottom: 1px solid #555;
}
li:last-child {
  border-bottom: none;
}
li a.active {
  background-color: #4CAF50;
  color: white;
}
li a:hover:not(.active) {
  background-color: #555;
  color: white;
}
</style>
</head>
<body>
<h1>垂直导航栏</h1>
<p>在本例中，我们居中导航链接并为导航栏添加边框：</p>
<ul>
  <li><a class="active" href="#home">Home</a></li>
  <li><a href="#news">News</a></li>
  <li><a href="#contact">Contact</a></li>
  <li><a href="#about">About</a></li>
</ul>
</body>
</html>
】

行内列表项
构建水平导航栏的一种方法是，除了上一章中的“标准”代码外，还要将 <li> 元素指定为 inline：

浮动列表项
创建水平导航栏的另一种方法是浮动 <li> 元素，并为导航链接规定布局：

float: left; - 使用 float 使块元素滑动为彼此相邻
display: block; - 将链接显示为块元素可以使整个链接区域都可单击（不仅是文本），而且允许我们指定填充（如果需要，还可以指定高度，宽度，边距等）
padding: 8px; - 使块元素更美观
background-color: #dddddd; - 为每个元素添加灰色背景色

【
<!DOCTYPE html>
<html>
<head>
<style>
ul {
  list-style-type: none;
  margin: 0;
  padding: 0;
  overflow: hidden;
  background-color: #333;
}

li {
  float: left;
}

li a {
  display: block;
  color: white;
  text-align: center;
  padding: 14px 16px;
  text-decoration: none;
}

li a:hover:not(.active) {
  background-color: #111;
}
.active {
  background-color: #4CAF50;
}
</style>
</head>
<body>
<ul>
  <li><a class="active" href="#home">Home</a></li>
  <li><a href="#news">News</a></li>
  <li><a href="#contact">Contact</a></li>
  <li><a href="#about">About</a></li>
</ul>
</body>
</html>
】

将 border-right 属性添加到 <li>，以创建链接分隔符：

例子解释：
#navlist {position:relative;} - 位置设置为相对，以允许在其中进行绝对定位
#navlist li {margin:0;padding:0;list-style:none;position:absolute;top:0;} - 外边距和内边距设置为 0，删除 list-style，并且所有列表项都均为绝对定位
#navlist li, #navlist a {height:44px;display:block;} - 所有图片的高度均为 44px
现在开始为每个特定部分设置定位和样式：
#home {left:0px;width:46px;} - 一直向左定位，图像宽度 46px
#home {background:url(navsprites.gif) 0 0;} - 定义背景图片及其位置（left 0px, top 0px）
#prev {left:63px;width:43px;} - 向右定位 63px（#home 宽度 46px + 项目之间的一些额外空间），宽度 43px。
#prev {background:url('navsprites.gif') -47px 0;} - 定义背景图片向右 47px（#home 宽度 46px + 1px 分隔线）
#next {left:129px;width:43px;} - 向右定位 129px（#prev 开始是 63px + #prev 的宽度是 43px + 多余的空格），宽度 43px。
#next {background:url('navsprites.gif') -91px 0;} - 定义背景图片向右 91px（#home 宽度 46px + 1px 分隔线+ #prev 宽度 43px + 1px 分隔线）


 CSS [attribute] 选择器
[attribute] 选择器用于选取带有指定属性的元素。
下例选择所有带有 target 属性的 <a> 元素；
a[target] {
  background-color: yellow;
}

CSS [attribute="value"] 选择器
[attribute="value"] 选择器用于选取带有指定属性和值的元素。
下例选取所有带有 target="_blank" 属性的 <a> 元素：
a[target="_blank"] {
  background-color: yellow;
}

CSS [attribute~="value"] 选择器
[attribute~="value"] 选择器选取[属性值包含指定词的元素]。
下例选取 title 属性包含 "flower" 单词的所有元素：
[title~="flower"] {
  border: 5px solid yellow;
}
上面的例子会匹配以下属性的元素：title="flower"、title="summer flower" 以及 title="flower new"，
但不匹配：title="my-flower" 或 title="flowers"。

CSS [attribute|="value"] 选择器
[attribute|="value"] 选择器用于选取指定属性以指定值开头的元素。
下例选取 class 属性以 "top" 开头的所有元素：
注释：值必须是完整或单独的单词，比如 class="top" 或者后跟连字符的，比如 class="top-text"。

CSS [attribute^="value"] 选择器
[attribute^="value"] 选择器用于选取指定属性以指定值开头的元素。
下例选取 class 属性以 "top" 开头的所有元素：
提示：值不必是完整单词！

CSS [attribute$="value"] 选择器
[attribute$="value"] 选择器用于选取指定属性以指定值结尾的元素。
下例选取 class 属性以 "test" 结尾的所有元素：
提示：值不必是完整单词！

CSS [attribute*="value"] 选择器
[attribute*="value"] 选择器选取属性值包含指定词的元素。
下例选取 class 属性包含 "te" 的所有元素：
提示：值不必是完整单词！
[class*="te"] {
  background: yellow;
}

所有 CSS 属性选择器
选择器	            例子	                 例子描述
[attribute]	        [target]	         选择带有 target 属性的所有元素。
[attribute=value]	[target=_blank]	     选择带有 target="_blank" 属性的所有元素。
[attribute~=value]	[title~=flower]	     选择带有包含 "flower" 一词的 title 属性的所有元素。
[attribute|=value]	[lang|=en]	         选择带有以 "en" 开头的 lang 属性的所有元素。
[attribute^=value]	a[href^="https"]	 选择其 href 属性值以 "https" 开头的每个 <a> 元素。
[attribute$=value]	a[href$=".pdf"]	     选择其 href 属性值以 ".pdf" 结尾的每个 <a> 元素。
[attribute*=value]	a[href*="w3school"]	 选择其 href 属性值包含子串 "w3school" 的每个 <a> 元素。
*/
body {
    background-color: #ff639a;
    font-size: 20px;

}

ul {
    list-style-type: none;
    margin: 0;
    padding: 0;
    overflow: hidden;
    background-color: #ffabf0;
}

li {
    float: left;
}

li a.active {
    background-color: #ffa84d;
    color: rgba(0, 0, 0);
}

li a {
    display: inline-block;
    color: white;
    text-align: center;
    padding: 20px 16px;
    text-decoration: none;
}

li > a:hover:not(.active) {
    background-color: #ff4958;
}

#img1 {
    float: left;
}

#div1 {
    float: left;
    font-family: 华文彩云;
    color: #863cff;
    font-size: 56px;
}

#img2 {
    float: right;
}

#div2 {
    border: 10px #a336ff inset;
    border-radius: 8px;
    font-size: 36px;
    float: right;
    overflow: auto;
    background-color: #ff94f4;
    color: #ff333b;
}

#span1 {
    font-size: 80px;
    color: #3a0f3b;
}


li.li_drop {
    display: inline-block;
}

.div_drop {
    display: none;
    position: absolute;
    background-color: #ffafe1;
    min-width: 90px;
    box-shadow: 0px 8px 8px 0px rgba(0, 0, 0, 0.2);
    z-index: 1;
}

.div_drop a {
    color: black;
    padding: 20px 16px;
    text-decoration: none;
    display: block;
    text-align: left;
}

.div_drop a:hover {
    background-color: #beccff;
}

.li_drop:hover .div_drop {
    display: block;
}
